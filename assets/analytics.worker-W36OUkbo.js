function w(r,s){if(r.length!==s.length)throw new Error("Arrays must have the same length.");const t=r.length;if(t===0)throw new Error("Arrays should not be empty.");const n=r.reduce((o,h)=>o+h,0)/t,i=s.reduce((o,h)=>o+h,0)/t;let l=0,u=0,d=0;for(let o=0;o<t;o++){const h=r[o]-n,a=s[o]-i;l+=h*a,u+=h*h,d+=a*a}const f=Math.sqrt(u*d);return f===0?0:l/f}function M(r,s){if(r.length!==s.length)throw new Error("Arrays must have the same length.");const t=r.length;if(t===0)throw new Error("Arrays must not be empty.");const n=r.reduce((e,c)=>e+c,0)/t,i=s.reduce((e,c)=>e+c,0)/t;let l=0,u=0;for(let e=0;e<t;e++){const c=r[e]-n,g=s[e]-i;l+=c*g,u+=c*c}const d=l/u,f=i-d*n;let o=0,h=0;for(let e=0;e<t;e++){const c=d*r[e]+f;h+=(s[e]-c)**2,o+=(s[e]-i)**2}const a=o===0?0:1-h/o;return{slope:d,intercept:f,rSquared:a}}function p(r){return r.map((s,t)=>{if(t===0)return 0;const n=r[t-1],i=s.x-n.x,l=s.y-n.y,u=(s.timestamp-n.timestamp)/1e3;return u>0?Math.max(0,Math.sqrt(i*i+l*l)/u):0})}function S(r,s,t=50){const n=p(r),i=p(s),l=[];let u=0,d=0;for(;u<n.length&&d<i.length;){const f=r[u].timestamp,o=s[d].timestamp;Math.abs(f-o)<t?(l.push({gazeSpeed:n[u],cursorSpeed:i[d],timestamp:(f+o)/2}),u++,d++):f<o?u++:d++}return l}function x(r,s,t){const{radius:n,gridSize:i,screenWidth:l,screenHeight:u}=t;if(r.length!==s.length)throw new Error("Gaze and Mouse data arrays must have the same length");const d=Math.ceil(l/i),f=Math.ceil(u/i),o=Array.from({length:f},()=>Array.from({length:d},()=>({total:0,matches:0})));for(let h=0;h<r.length;h++){const a=r[h],e=s[h],c=Math.floor(a.x/i),g=Math.floor(a.y/i);if(g<0||g>=f||c<0||c>=d)continue;const m=Math.hypot(a.x-e.x,a.y-e.y)<=n?1:0;o[g][c].total++,o[g][c].matches+=m}return o.flatMap((h,a)=>h.map((e,c)=>({x:c*i+i/2,y:a*i+i/2,si:e.total>0?e.matches/e.total*100:0,count:e.total}))).filter(h=>h.count>0)}function z(r,s,t){const{screenWidth:n,screenHeight:i,gridSize:l,actionThreshold:u}=t;if(r.length!==s.length)throw new Error("Gaze and Mouse data arrays must have the same length");const d=Math.ceil(n/l),f=Math.ceil(i/l),o=Array.from({length:f},()=>Array.from({length:d},()=>({total:0,withoutAction:0})));for(let a=1;a<r.length;a++){const e=r[a],c=s[a],g=s[a-1],y=Math.floor(e.x/l),m=Math.floor(e.y/l);if(m<0||m>=f||y<0||y>=d)continue;o[m][y].total++,Math.hypot(c.x-g.x,c.y-g.y)<u&&o[m][y].withoutAction++}const h=[];for(let a=0;a<f;a++)for(let e=0;e<d;e++){const c=o[a][e];c.total>0&&h.push({x:e*l+l/2,y:a*l+l/2,dr:c.withoutAction/c.total*100,count:c.total})}return h}self.onmessage=async r=>{const{type:s,payload:t}=r.data;try{let n;switch(s){case"pearsonCorrelation":{n=w(t.x,t.y);break}case"linearRegression":{n=M(t.x,t.y);break}case"syncVelocityPairs":{n=S(t.gazeData,t.mouseData,t.toleranceMs);break}case"si":{n=x(t.gazeData,t.mouseData,{screenWidth:t.screenWidth,screenHeight:t.screenHeight,radius:t.radius,gridSize:t.gridSize});break}case"dr":{n=z(t.gazeData,t.mouseData,{screenWidth:t.screenWidth,screenHeight:t.screenHeight,gridSize:t.gridSize,actionThreshold:t.actionThreshold});break}default:throw new Error("Unknown type: ".concat(s))}self.postMessage({status:"success",result:n})}catch(n){self.postMessage({status:"error",error:n.message})}};
